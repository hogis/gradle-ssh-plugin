description 'Automated acceptance test with SSH server'

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath "org.hidetake:gradle-ssh-plugin:$version"
    }
}

apply plugin: 'org.hidetake.ssh'

remotes {
    localhost {
        role 'testServers'
        host = 'localhost'
        user = System.properties['user.name']
        identity = file("${System.properties['user.home']}/.ssh/id_rsa")
    }
}

task test           { description = 'Run tests' }
task testWithAgent  { description = 'Run tests which require ssh-agent' }
task aggressiveTest { description = 'Run tests which require environment modification' }


/*
 * Test helper tasks and methods.
 */

ext {
    randomInt = { int max = 10000 -> (Math.random() * max) as int }

    remoteTempPrefix = "/tmp/remote-fixture-${randomInt()}"
    remoteTempPath = { String name = randomInt().toString() -> "$remoteTempPrefix-$name" }

    localTempPrefix = "$buildDir/local-fixture-${randomInt()}"
    localTempPath = { String name = randomInt().toString() -> "$localTempPrefix-$name" }
}

project.metaClass.mixin(FeatureSupport as Class)

task setupBuildDir(type: Delete) {
    delete buildDir
    doLast {
        buildDir.mkdir()
    }
}

task cleanLocalTemp << {
    delete buildDir
    buildDir.mkdir()
}

task cleanRemoteTemp(type: SshTask) {
    session(remotes.localhost) {
        assert remoteTempPrefix
        execute("rm -vr ${remoteTempPrefix}*")
    }
}


fileTree(projectDir) {
    include '*.gradle'
    exclude 'build.gradle'
}.each {
    apply from: it
}


task wrapper(type: Wrapper) {
    if (System.getenv('GRADLE_VERSION')) {
        gradleVersion = System.getenv('GRADLE_VERSION')
    }
}
